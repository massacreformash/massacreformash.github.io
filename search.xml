<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[模拟SDWebImage异步下载图片操作(五) 抽取SDWebImage分类]]></title>
      <url>http://yoursite.com/2016/08/04/%E6%A8%A1%E6%8B%9FSDWebImage%E5%BC%82%E6%AD%A5%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C(%E4%BA%94)%20%E6%8A%BD%E5%8F%96SDWebImage%E5%88%86%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h2 id="a-UIImageView的分类方法"><a href="#a-UIImageView的分类方法" class="headerlink" title="a.UIImageView的分类方法"></a>a.UIImageView的分类方法</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>通过<code>分类</code>方法简化Web图像加载</li>
<li>使用<code>runtime</code>中<code>关联对象</code>, 对分类中的属性进行关联</li>
</ul>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>新建<code>UIImageView</code>的分类<code>UIImageView+HMWebCache</code></li>
<li>定义分类的对象方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIImageView</span> (<span class="title">HMWebCache</span>)</span></div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)hm_setImageWithURLString:(<span class="built_in">NSString</span> *)URLString placeHolder:(<span class="built_in">UIImage</span> *)placeHolder;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="分类方法的初步实现"><a href="#分类方法的初步实现" class="headerlink" title="分类方法的初步实现"></a>分类方法的初步实现</h4><ul>
<li>导入下载管理器的头文件</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#import</span> <span class="string">"HMDownloadOperationManager.h"</span></div></pre></td></tr></table></figure>
<ul>
<li>实现分类方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)hm_setImageWithURLString:(<span class="built_in">NSString</span> *)URLString placeHolder:(<span class="built_in">UIImage</span> *)placeHolder&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">self</span>.image = placeHolder;</div><div class="line">    </div><div class="line">    [[HMDownloadOperationManager sharedManager] downloadImageWithURLString:URLString completion:^(<span class="built_in">UIImage</span> *image) &#123;</div><div class="line">        <span class="keyword">self</span>.image = image;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改viewController的代码"><a href="#修改viewController的代码" class="headerlink" title="修改viewController的代码"></a>修改<code>viewController</code>的代码</h4><ul>
<li>导入分类的头文件</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#import</span> <span class="string">"UIImageView+HMWebCache.h"</span></div></pre></td></tr></table></figure>
<ul>
<li>修改数据源方法</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">-(UITableViewCell *)<span class="string">tableView:</span>(UITableView *)tableView <span class="string">cellForRowAtIndexPath:</span>(NSIndexPath *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView <span class="string">dequeueReusableCellWithIdentifier:</span>cellID <span class="string">forIndexPath:</span>indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = self.app_infos[indexPath.row];</div><div class="line">    </div><div class="line">    cell.appName.text = info.name;</div><div class="line">    cell.downCount.text = info.download;</div><div class="line">    <span class="comment">//在这里设置占位图像 用来解决图像闪动的问题</span></div><div class="line">    cell.iconView.image = [UIImage <span class="string">imageNamed:</span>@<span class="string">"user_default"</span>];</div><div class="line">    </div><div class="line">    [cell.iconView <span class="string">hm_setImageWithURLString:</span>info.icon <span class="string">placeHolder:</span>[UIImage <span class="string">imageNamed:</span>@<span class="string">"user_default"</span>]];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/1gBG2+" alt="测试"></p>
<ul>
<li>发现快速滚动的时候, cell一旦复用, 会重复创建下载操作, 导致图片错乱</li>
<li>解决方案: 记录此前的<code>URLString</code>, 如果当前cell的<code>URLString</code>发生变化, 则取消之前的下载操作</li>
</ul>
</blockquote>
<h4 id="运行时关联对象的使用"><a href="#运行时关联对象的使用" class="headerlink" title="运行时关联对象的使用"></a>运行时关联对象的使用</h4><ul>
<li>在分类中定义<code>URLString</code>属性</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *URLString;</div></pre></td></tr></table></figure>
<ul>
<li>导入头文件</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>此时会得到以下两个警告, 提示我们属性<code>URLString</code>需要进行动态的绑定</p>
<ul>
<li>Property ‘URLString’ requires method ‘URLString’ to be defined - use @dynamic or provide a method implementation in this category</li>
<li>Property ‘URLString’ requires method ‘setURLString:’ to be defined - use @dynamic or provide a method implementation in this category</li>
<li>定义关联对象属性的<code>key</code></li>
</ul>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *URLStringKey = <span class="string">"kURLStringKey"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>实现属性的<code>getter</code>和<code>setter</code>方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSString</span> *)URLString&#123;</div><div class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, URLStringKey);</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)setURLString:(<span class="built_in">NSString</span> *)URLString&#123;</div><div class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, URLStringKey, URLString, OBJC_ASSOCIATION_COPY_NONATOMIC);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改分类中设置图像的方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)hm_setImageWithURLString:(<span class="built_in">NSString</span> *)URLString placeHolder:(<span class="built_in">UIImage</span> *)placeHolder&#123;</div><div class="line">    <span class="comment">//当准备下载的图像的url与此前该cell中准备下载的图像url不等, 且该cell中至少有一个图像正在下载时</span></div><div class="line">    <span class="comment">//取消之前的下载操作(取消操作将在后面实现)</span></div><div class="line">    <span class="keyword">if</span> (![URLString isEqualToString:<span class="keyword">self</span>.URLString] &amp;&amp; <span class="keyword">self</span>.URLString != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"取消之前的下载操作"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//使用新的url下载图像, 并记录当前的url</span></div><div class="line">    <span class="keyword">self</span>.URLString = URLString;</div><div class="line">    </div><div class="line">    <span class="comment">//设置占位图像</span></div><div class="line">    <span class="keyword">self</span>.image = placeHolder;</div><div class="line">    </div><div class="line">    [[HMDownloadOperationManager sharedManager] downloadImageWithURLString:URLString completion:^(<span class="built_in">UIImage</span> *image) &#123;</div><div class="line">        <span class="comment">//下载完成后回调时, 将当前下载操作的url置空</span></div><div class="line">        <span class="comment">//(清除关联属性)</span></div><div class="line">        <span class="keyword">self</span>.URLString = <span class="literal">nil</span>;</div><div class="line">        <span class="comment">//设置下载好的图片</span></div><div class="line">        <span class="keyword">self</span>.image = image;</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>下一目标: 取消指定<code>URLString</code>的下载操作</p>
</blockquote>
<h2 id="b-取消指定-URLString-的下载操作"><a href="#b-取消指定-URLString-的下载操作" class="headerlink" title="b.取消指定 URLString 的下载操作"></a>b.取消指定 URLString 的下载操作</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul>
<li>取消指定URLString的下载操作, 以解决图像复用的问题</li>
</ul>
<h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>在<code>HMDownloadOperationManager.h</code>中增加方法定义</li>
</ul>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-<span class="params">(void)</span>cancelDownloadOperationWithURLString:<span class="params">(NSString *)</span>URLString;</div></pre></td></tr></table></figure>
<ul>
<li>实现该方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)cancelDownloadOperationWithURLString:(<span class="built_in">NSString</span> *)URLString&#123;</div><div class="line">    <span class="comment">//从缓存中取到下载操作</span></div><div class="line">    HMDownloadOperation *operation = [<span class="keyword">self</span>.operationCacheDict objectForKey:URLString];</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"向之前的下载操作发送取消下载的消息:%@, %@"</span>, URLString, operation);</div><div class="line">    <span class="comment">//发送取消操作的消息</span></div><div class="line">    <span class="keyword">if</span> (operation != <span class="literal">nil</span>) &#123;</div><div class="line">        [operation cancel];</div><div class="line">        <span class="comment">//将操作从缓存中移除</span></div><div class="line">        [<span class="keyword">self</span>.operationCacheDict removeObjectForKey:URLString];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在<code>UIImageView</code>的分类方法中调用方法, 取消之前已有的下载操作</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当准备下载的图像的url与此前该cell中准备下载的图像url不等, 且该cell中至少有一个图像正在下载时</span></div><div class="line"><span class="comment">//取消之前的下载操作(取消操作将在后面实现)</span></div><div class="line"><span class="keyword">if</span> (![URLString isEqualToString:<span class="keyword">self</span>.URLString] &amp;&amp; <span class="keyword">self</span>.URLString != <span class="literal">nil</span>) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"取消之前的下载操作"</span>);</div><div class="line">    <span class="comment">//进行取消操作</span></div><div class="line">    [[HMDownloadOperationManager sharedManager] cancelDownloadOperationWithURLString:<span class="keyword">self</span>.URLString];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/1jpDm+" alt="测试"><br>可以看到已经比较好的解决了图像重复下载的问题, 当滑动时, 未下载图像的cell会先取消之前的下载操作, 重新下载当前图像</p>
</blockquote>
<h2 id="c-内存警告处理"><a href="#c-内存警告处理" class="headerlink" title="c.内存警告处理"></a>c.内存警告处理</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><ul>
<li>学习<code>SDWebImage</code>的内存警告方法, 处理内存警告</li>
</ul>
<h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>在<code>HMDownloadOperationManager</code>的<code>init</code>方法中注册内存警告通知</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _downloadQueque = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">        _imageCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">        _operationCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">        </div><div class="line">        <span class="comment">//注册内存警告通知</span></div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(memoryWarning) name:<span class="built_in">UIApplicationDidReceiveMemoryWarningNotification</span> object:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//下载管理器销毁时, 注销通知中心</span></div><div class="line">-(<span class="keyword">void</span>)dealloc&#123;</div><div class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>实现内存警告方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)memoryWarning &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"memory warning received!"</span>);</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.imageCacheDict removeAllObjects];</div><div class="line">    [<span class="keyword">self</span>.operationCacheDict removeAllObjects];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.downloadQueque cancelAllOperations];</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模拟SDWebImage异步下载图片操作(四) 仿SDWebImage的操作]]></title>
      <url>http://yoursite.com/2016/08/03/%E6%A8%A1%E6%8B%9FSDWebImage%E5%BC%82%E6%AD%A5%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C(%E5%9B%9B)%20%E4%BB%BFSDWebImage%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul>
<li>在上一阶段<code>异步加载网络图像</code>的基础上模拟<code>SDWebImage</code>的实现</li>
<li>深入理解异步加载网络图像的流程</li>
<li>掌握<code>runtime</code>关联对象的使用和应用场景</li>
</ul>
<h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><p><img src="http://d.pr/i/vcEz+" alt="架构设计"></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="实现下载管理器单例"><a href="#实现下载管理器单例" class="headerlink" title="实现下载管理器单例"></a>实现下载管理器单例</h4><ul>
<li>新建下载管理器单例</li>
<li>将<code>viewController</code>中有关<code>图像缓存</code>/<code>下载操作</code>逻辑判断的代码直接移植到下载管理器中<h4 id="实现图像下载操作"><a href="#实现图像下载操作" class="headerlink" title="实现图像下载操作"></a>实现图像下载操作</h4></li>
<li>将控制器中的有关<code>图像下载</code>的逻辑移植到下载操作中, 并设置接口, 使得管理器能够直接调用</li>
</ul>
<blockquote>
<p>待图像下载工作完成后, 导入<code>UIImageView</code>分类方法, 利用运行时的关联对象解决图像复用问题</p>
</blockquote>
<h2 id="a-实现下载管理器"><a href="#a-实现下载管理器" class="headerlink" title="a. 实现下载管理器"></a>a. 实现下载管理器</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul>
<li>实现所有的图像异步下载管理</li>
</ul>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>新建下载管理器继承自<code>NSObject</code></li>
<li>定义接口</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HMDownloadOperationManager</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  下载管理器单例的全局访问点</div><div class="line"> *</div><div class="line"> *  @return 下载管理器单例</div><div class="line"> */</div><div class="line">+(<span class="keyword">instancetype</span>)sharedManager;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  通过URL下载图像的对象方法</div><div class="line"> *</div><div class="line"> *  @param URLString  要下载图像的URL</div><div class="line"> *  @param completion 下载完成时的回调</div><div class="line"> */</div><div class="line">-(<span class="keyword">void</span>)downloadImageWithURLString:(<span class="built_in">NSString</span> *)URLString completion:(<span class="keyword">void</span>(^)(<span class="built_in">UIImage</span> *))completion;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="实现单例方法"><a href="#实现单例方法" class="headerlink" title="实现单例方法"></a>实现单例方法</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">instancetype)sharedManager&#123;</span></div><div class="line">    static HMDownloadOperationManager *manager<span class="comment">;</span></div><div class="line">    </div><div class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></div><div class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</div><div class="line">        manager = [[HMDownloadOperationManager alloc] init]<span class="comment">;</span></div><div class="line">    &#125;)<span class="comment">;</span></div><div class="line">    </div><div class="line">    return manager<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在类延展中定义相关成员变量</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> HMDownloadOperationManager ()</div><div class="line"></div><div class="line"><span class="variable">@property</span> (nonatomic, strong) NSOperationQueue *downloadQueque;</div><div class="line"><span class="variable">@property</span> (nonatomic, strong) NSMutableDictionary *imageCacheDict;</div><div class="line"><span class="variable">@property</span> (nonatomic, strong) NSMutableDictionary *operationCacheDict;</div><div class="line"></div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>实现<code>init</code>方法实例化相关成员变量</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        _downloadQueque = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">        _imageCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">        _operationCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现下载操作代码"><a href="#实现下载操作代码" class="headerlink" title="实现下载操作代码"></a>实现下载操作代码</h4><ul>
<li>缓存图片的时候, 由于是采用使用URL的<code>lastPathComponent</code>作为缓存图片的文件名进行存储的, 因此当前面的地址不同, 而<code>lastPathComponent</code>相同时, 可能造成缓存混乱, 例如:<blockquote>
<p>www.zhihu.com/123.png<br>www.baidu.com/123.png</p>
</blockquote>
</li>
<li>上面两个文件缓存后会导致覆盖!!!</li>
<li>因此要保证每一个文件在缓存的时候都能得到唯一的文件名</li>
<li>所以将缓存图片的url进行md5操作后, 能够使得缓存数据获得唯一性</li>
<li>导入<code>NSString+hash</code>分类, 该类中的方法可以进行一系列的加密操作, 我们使用其中的md5操作</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSString</span> *)filePathWithURLString:(<span class="built_in">NSString</span> *)URLString &#123;</div><div class="line">    <span class="comment">//获取沙盒缓存路径</span></div><div class="line">    <span class="built_in">NSString</span> *cachesPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line">    <span class="comment">//将URL进行md5操作</span></div><div class="line">    <span class="built_in">NSString</span> *md5_fileName = [URLString cz_md5String];</div><div class="line">    <span class="comment">//合成缓存文件路径</span></div><div class="line">    <span class="built_in">NSString</span> *cacheFilePath = [cachesPath stringByAppendingPathComponent:md5_fileName];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cacheFilePath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>将逻辑判断的代码剪切到<code>下载管理器</code>中</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)downloadImageWithURLString:(<span class="built_in">NSString</span> *)URLString completion:(<span class="keyword">void</span> (^)(<span class="built_in">UIImage</span> *))completion&#123;</div><div class="line">    <span class="built_in">NSAssert</span>(completion != <span class="literal">nil</span>, <span class="string">@"必须传入完成回调"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> *cacheImage = <span class="keyword">self</span>.imageCacheDict[URLString];</div><div class="line">    <span class="comment">//判断图像是否已经被缓存</span></div><div class="line">    <span class="comment">//如果缓存 则直接将缓存中的图像显示在iconView上</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.imageCacheDict[URLString] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"图像已经从字典缓存中取出"</span>);</div><div class="line">        completion(cacheImage);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取沙盒路径</span></div><div class="line">    <span class="built_in">NSString</span> *cachePath = [<span class="keyword">self</span> filePathWithURLString:URLString];</div><div class="line">    <span class="comment">//判断沙盒中是否已经缓存了图片</span></div><div class="line">    cacheImage = [<span class="built_in">UIImage</span> imageWithContentsOfFile:cachePath];</div><div class="line">    <span class="keyword">if</span> (cacheImage != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"图像已经从沙盒中取出"</span>);</div><div class="line">        <span class="comment">//如果缓存了图片, 则向图像缓存字典中存储一份, 并将图像直接显示到cell的iconView上</span></div><div class="line">        [<span class="keyword">self</span>.imageCacheDict setObject:cacheImage forKey:URLString];</div><div class="line">        completion(cacheImage);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//判断操作是否已经在队列中, 如果操作已经存在, 那么直接返回</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.operationCacheDict[URLString] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"downloading......"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br>此时程序本质上没有进行任何改动, 程序运行和之前应该没有任何区别<br>下一目标: 自定义下载操作</p>
</blockquote>
<h2 id="b-实现下载操作"><a href="#b-实现下载操作" class="headerlink" title="b. 实现下载操作"></a>b. 实现下载操作</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><ul>
<li>实现下载操作, 处理单独的文件下载</li>
<li>体会<code>isCancelled</code>属性的使用</li>
<li>掌握在自定义<code>operation</code>时, 需要:<ul>
<li>重写<code>main</code>方法</li>
</ul>
</li>
</ul>
<h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>新建下载操作<code>HMDownloadOperation</code>继承自<code>NSOperation</code></li>
<li>定义相关接口如下</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HMDownloadOperation</span> : <span class="title">NSOperation</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">UIImage</span> *downloadImage;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  下载操作</div><div class="line"> *</div><div class="line"> *  @param URLString 要下载文件的URL路径</div><div class="line"> *  @param cachePath 缓存文件的地址</div><div class="line"> *</div><div class="line"> *  @return 创建好的下载操作</div><div class="line"> */</div><div class="line">+(<span class="keyword">instancetype</span>)downloadOperationWithURLString:(<span class="built_in">NSString</span> *)URLString cachePath:(<span class="built_in">NSString</span> *)cachePath;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="实现类方法"><a href="#实现类方法" class="headerlink" title="实现类方法"></a>实现类方法</h4><ul>
<li>在类扩展中定义属性</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> HMDownloadOperation ()</div><div class="line"></div><div class="line"><span class="variable">@property</span> (nonatomic, copy) NSString *URLString;</div><div class="line"><span class="variable">@property</span> (nonatomic, copy) NSString *cachePath;</div><div class="line"></div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>实现类方法, 记录属性值</li>
</ul>
<figure class="highlight elm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">+(instance<span class="keyword">type</span>)downloadOperationWithURLString:(<span class="type">NSString</span> *)<span class="type">URLString</span> cachePath:(<span class="type">NSString</span> *)cachePath&#123;</div><div class="line">    <span class="type">HMDownloadOperation</span> *operation = [[<span class="type">HMDownloadOperation</span> alloc] init];</div><div class="line">    </div><div class="line">    operation.<span class="type">URLString</span> = <span class="type">URLString</span>;</div><div class="line">    operation.cachePath = cachePath;</div><div class="line">    </div><div class="line">    return operation;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="实现main方法"><a href="#实现main方法" class="headerlink" title="实现main方法"></a>实现<code>main</code>方法</h4><blockquote>
<ul>
<li><code>main</code>方法是自定义操作的入口方法</li>
<li>添加操作是否被取消的判断</li>
</ul>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)main&#123;</div><div class="line">    <span class="comment">//生成下载URL</span></div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.URLString];</div><div class="line">    </div><div class="line">    <span class="comment">//判断下载链接是否生成成功</span></div><div class="line">    <span class="keyword">if</span> (url == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载地址错误"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断操作是否已被取消</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.isCancelled) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载操作被取消了!"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//下载</span></div><div class="line">    <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="comment">//将数据写入沙盒中</span></div><div class="line">        [data writeToFile:<span class="keyword">self</span>.cachePath atomically:<span class="literal">YES</span>];</div><div class="line">        <span class="comment">//将二进制数据转换成图像</span></div><div class="line">        <span class="keyword">self</span>.downloadImage = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="c-在下载管理器中增加下载操作"><a href="#c-在下载管理器中增加下载操作" class="headerlink" title="c. 在下载管理器中增加下载操作"></a>c. 在下载管理器中增加下载操作</h2><h3 id="目标-3"><a href="#目标-3" class="headerlink" title="目标"></a>目标</h3><ul>
<li>在下载管理器中增加下载操作</li>
<li>测试下载的沙盒缓存和内存缓存</li>
</ul>
<h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>在<code>HMDownloadOperationManager</code>中导入<code>HMDownloadOperation</code>的头文件</li>
<li>在<code>HMDownloadOperationManager</code>中继续实现<code>downloadImageWithURLString: completion:</code>方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)downloadImageWithURLString:(<span class="built_in">NSString</span> *)URLString completion:(<span class="keyword">void</span> (^)(<span class="built_in">UIImage</span> *))completion&#123;</div><div class="line">    <span class="built_in">NSAssert</span>(completion != <span class="literal">nil</span>, <span class="string">@"必须传入完成回调"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">UIImage</span> *cacheImage = [<span class="keyword">self</span>.imageCacheDict objectForKey:URLString];</div><div class="line">    <span class="comment">//判断图像是否已经被缓存</span></div><div class="line">    <span class="comment">//如果缓存 则直接将缓存中的图像显示在iconView上</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.imageCacheDict[URLString] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"图像已经从字典缓存中取出"</span>);</div><div class="line">        completion(cacheImage);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取沙盒路径</span></div><div class="line">    <span class="built_in">NSString</span> *cachePath = [<span class="keyword">self</span> filePathWithURLString:URLString];</div><div class="line">    <span class="comment">//判断沙盒中是否已经缓存了图片</span></div><div class="line">    cacheImage = [<span class="built_in">UIImage</span> imageWithContentsOfFile:cachePath];</div><div class="line">    <span class="keyword">if</span> (cacheImage != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"图像已经从沙盒中取出"</span>);</div><div class="line">        <span class="comment">//如果缓存了图片, 则向图像缓存字典中存储一份, 并将图像直接显示到cell的iconView上</span></div><div class="line">        [<span class="keyword">self</span>.imageCacheDict setObject:cacheImage forKey:URLString];</div><div class="line">        completion(cacheImage);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//判断操作是否已经在队列中, 如果操作已经存在, 那么直接返回</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.operationCacheDict[URLString] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"downloading......"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//实例化下载操作</span></div><div class="line">    HMDownloadOperation *operation = [HMDownloadOperation downloadOperationWithURLString:URLString cachePath:cachePath];</div><div class="line">    <span class="comment">//监听下载完成的操作</span></div><div class="line">    [operation setCompletionBlock:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载已完成 %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    &#125;];</div><div class="line">    <span class="comment">//将操作加入下载队列, 并添加到操作缓存中</span></div><div class="line">    [<span class="keyword">self</span>.downloadQueque addOperation:operation];</div><div class="line">    [<span class="keyword">self</span>.operationCacheDict setObject:operation forKey:URLString];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="修改ViewController代码"><a href="#修改ViewController代码" class="headerlink" title="修改ViewController代码"></a>修改<code>ViewController</code>代码</h4><h5 id="修改前的准备"><a href="#修改前的准备" class="headerlink" title="修改前的准备"></a>修改前的准备</h5><ul>
<li>在视图控制器中, 删除和下载相关的属性</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSOperationQueue</span> *downloadQueque;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *imageCacheDict;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *operationCacheDict;</div></pre></td></tr></table></figure>
<ul>
<li>删除懒加载的相关代码</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSOperationQueue</span> *)downloadQueque&#123;</div><div class="line">    <span class="keyword">if</span> (_downloadQueque == <span class="literal">nil</span>) &#123;</div><div class="line">        _downloadQueque = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> _downloadQueque;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">NSMutableDictionary</span> *)imageCacheDict&#123;</div><div class="line">    <span class="keyword">if</span> (_imageCacheDict == <span class="literal">nil</span>) &#123;</div><div class="line">        _imageCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> _imageCacheDict;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">NSMutableDictionary</span> *)operationCacheDict&#123;</div><div class="line">    <span class="keyword">if</span> (_operationCacheDict == <span class="literal">nil</span>) &#123;</div><div class="line">        _operationCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> _operationCacheDict;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>注释掉<code>didReceiveMemoryWarning</code>方法</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">didReceiveMemoryWarning</span>&#123;</div><div class="line">    <span class="selector-attr">[super didReceiveMemoryWarning]</span>;</div><div class="line">    <span class="comment">//移除缓存中的所有对象</span></div><div class="line">    <span class="selector-attr">[self.imageCacheDict removeAllObjects]</span>;</div><div class="line">    <span class="selector-attr">[self.operationCacheDict removeAllObjects]</span>;</div><div class="line">    <span class="comment">//取消队列中的所有操作</span></div><div class="line">    <span class="selector-attr">[self.downloadQueque cancelAllOperations]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="使用下载操作管理器下载图像"><a href="#使用下载操作管理器下载图像" class="headerlink" title="使用下载操作管理器下载图像"></a>使用下载操作管理器下载图像</h5><ul>
<li>导入头文件</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#import</span> <span class="string">"HMDownloadOperationManager.h"</span></div></pre></td></tr></table></figure>
<ul>
<li>修改数据源方法</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-(UITableViewCell *)<span class="string">tableView:</span>(UITableView *)tableView <span class="string">cellForRowAtIndexPath:</span>(NSIndexPath *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView <span class="string">dequeueReusableCellWithIdentifier:</span>cellID <span class="string">forIndexPath:</span>indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = self.app_infos[indexPath.row];</div><div class="line">    </div><div class="line">    cell.appName.text = info.name;</div><div class="line">    cell.downCount.text = info.download;</div><div class="line">    <span class="comment">//在这里设置占位图像 用来解决图像闪动的问题</span></div><div class="line">    cell.iconView.image = [UIImage <span class="string">imageNamed:</span>@<span class="string">"user_default"</span>];</div><div class="line">    </div><div class="line">    HMDownloadOperationManager *manager = [HMDownloadOperationManager sharedManager];</div><div class="line">    </div><div class="line">    [manager <span class="string">downloadImageWithURLString:</span>info.icon <span class="string">completion:</span>^(UIImage *image) &#123;</div><div class="line">        cell.iconView.image = image;</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="下载完成后完成回调"><a href="#下载完成后完成回调" class="headerlink" title="下载完成后完成回调"></a>下载完成后完成回调</h5><ul>
<li>在下载管理中实现<code>setCompletionBlock</code>的代码</li>
</ul>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[<span class="name">operation</span> setCompletionBlock:^&#123;</div><div class="line">    NSLog(<span class="name">@</span><span class="string">"下载已完成 %@"</span>, [<span class="name">NSThread</span> currentThread])<span class="comment">;</span></div><div class="line">    </div><div class="line">    //主线程回调</div><div class="line">    [[<span class="name">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">        completion(<span class="name">operation.downloadImage</span>)<span class="comment">;</span></div><div class="line">    &#125;]<span class="comment">;</span></div><div class="line">&#125;]<span class="comment">;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>系统会提示循环引用了! 因为在<code>operation</code>的<code>completionBlock</code>中使用了<code>operation</code>自身</p>
</blockquote>
<ul>
<li>使用<code>__weak</code>解决循环引用的问题, 并完善代码</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实例化下载操作</span></div><div class="line">HMDownloadOperation *operation = [HMDownloadOperation downloadOperationWithURLString:URLString cachePath:cachePath];</div><div class="line"></div><div class="line">__<span class="keyword">weak</span> HMDownloadOperation *weakSelf = operation;</div><div class="line"></div><div class="line"><span class="comment">//监听下载完成的操作</span></div><div class="line">[operation setCompletionBlock:^&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"下载已完成 %@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    <span class="comment">//获取下载好的图片</span></div><div class="line">    <span class="built_in">UIImage</span> *cacheImage = weakSelf.downloadImage;</div><div class="line">    </div><div class="line">    <span class="comment">//下载完成后删除操作</span></div><div class="line">    [<span class="keyword">self</span>.operationCacheDict removeObjectForKey:URLString];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (cacheImage != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="comment">//存入字典缓存中</span></div><div class="line">        [<span class="keyword">self</span>.imageCacheDict setObject:cacheImage forKey:URLString];</div><div class="line">        </div><div class="line">        <span class="comment">//主线程回调</span></div><div class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">            completion(weakSelf.downloadImage);</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/1eOaG+" alt="测试"></p>
</blockquote>
<ul>
<li>在<code>HMDownloadOperation</code>中添加模拟延时的代码, 测试操作的缓存情况</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)main&#123;</div><div class="line">    <span class="comment">//生成下载URL</span></div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.URLString];</div><div class="line">    </div><div class="line">    <span class="comment">//模拟网络延迟</span></div><div class="line">    [<span class="built_in">NSThread</span> sleepForTimeInterval:arc4random_uniform(<span class="number">5</span>)];</div><div class="line">    </div><div class="line">    <span class="comment">//判断下载链接是否生成成功</span></div><div class="line">    <span class="keyword">if</span> (url == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载地址错误"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断操作是否已被取消</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.isCancelled) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"下载操作被取消了!"</span>);</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//下载</span></div><div class="line">    <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (data != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="comment">//将数据写入沙盒中</span></div><div class="line">        [data writeToFile:<span class="keyword">self</span>.cachePath atomically:<span class="literal">YES</span>];</div><div class="line">        <span class="comment">//将二进制数据转换成图像</span></div><div class="line">        <span class="keyword">self</span>.downloadImage = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/Dlua+" alt="测试"><br>下一目标: 建立<code>UIImageView</code>的分类方法</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模拟SDWebImage异步下载图片操作(三)]]></title>
      <url>http://yoursite.com/2016/08/02/%E6%A8%A1%E6%8B%9FSDWebImage%E5%BC%82%E6%AD%A5%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C(%E4%B8%89)/</url>
      <content type="html"><![CDATA[<h2 id="异步图像-操作缓存"><a href="#异步图像-操作缓存" class="headerlink" title="异步图像-操作缓存"></a>异步图像-操作缓存</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>建立<code>操作缓存字典</code>, 缓存下载操作, 避免操作被重复创建</li>
</ul>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><ul>
<li>在<code>viewController</code>中定义<code>操作缓存字典</code>属性</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *operationCacheDict;</div></pre></td></tr></table></figure>
<ul>
<li>懒加载操作缓存字典</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSMutableDictionary</span> *)operationCacheDict&#123;</div><div class="line">    <span class="keyword">if</span> (_operationCacheDict == <span class="literal">nil</span>) &#123;</div><div class="line">        _operationCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> _operationCacheDict;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>a.修改数据源方法, 在下载操作前, 判断下载操作是否已经存在</li>
<li>b.在数据源方法的末尾, 将操作添加到<code>操作缓存字典</code>中</li>
<li>c.在下载操作完成后, 应将操作移除</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = <span class="keyword">self</span>.app_infos[indexPath.row];</div><div class="line">    </div><div class="line">    cell.appName.text = info.name;</div><div class="line">    cell.downCount.text = info.download;</div><div class="line">    <span class="comment">//在这里设置占位图像 用来解决图像闪动的问题</span></div><div class="line">    cell.iconView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"user_default"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//判断图像是否已经被缓存</span></div><div class="line">    <span class="comment">//如果缓存 则直接将缓存中的图像显示在iconView上</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.imageCacheDict[info.icon] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ 的图像已经从字典缓存中取出"</span>, info.name);</div><div class="line">        cell.iconView.image = <span class="keyword">self</span>.imageCacheDict[info.icon];</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//a. 判断操作是否已经在队列中, 如果操作已经存在, 那么直接返回</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.operationCacheDict[info.icon] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ is downloading"</span>, info.name);</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.app_infos[indexPath.row].icon];</div><div class="line">    </div><div class="line">    <span class="built_in">NSBlockOperation</span> *op = [<span class="built_in">NSBlockOperation</span>  blockOperationWithBlock:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"正在下载 %@ 的图片"</span>, <span class="keyword">self</span>.app_infos[indexPath.row].name);</div><div class="line">        <span class="comment">//在这里加入模拟网络延迟的代码</span></div><div class="line">        <span class="comment">//模拟下载环境有随机延迟 可以看到有操作被重复添加了</span></div><div class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:arc4random_uniform(<span class="number">10</span>)];</div><div class="line">        </div><div class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line">        </div><div class="line">        <span class="comment">//在主线程中更新UI</span></div><div class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">            <span class="comment">//查看已经存在的操作数量</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"操作的数量: %ld"</span>, <span class="keyword">self</span>.downloadQueque.operationCount);</div><div class="line">            </div><div class="line">            <span class="comment">//添加到图像字典缓存中</span></div><div class="line">            <span class="comment">//注意!! 字典value不能为nil</span></div><div class="line">            <span class="keyword">if</span> (image != <span class="literal">nil</span>) &#123;</div><div class="line">                [<span class="keyword">self</span>.imageCacheDict setValue:image forKey:info.icon];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//c.下载完成, 应将当前下载操作从缓存中移除</span></div><div class="line">            [<span class="keyword">self</span>.operationCacheDict removeObjectForKey:info.icon];</div><div class="line">            </div><div class="line">            cell.iconView.image = image;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">//将操作加入下载队列</span></div><div class="line">    [<span class="keyword">self</span>.downloadQueque addOperation:op];</div><div class="line">    <span class="comment">//b. 将操作加入操作的字典缓存</span></div><div class="line">    [<span class="keyword">self</span>.operationCacheDict setObject:op forKey:info.icon];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>在内存警告中处理缓存操作</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> <span class="selector-tag">-</span> <span class="selector-tag">memory</span> <span class="selector-tag">Warning</span></div><div class="line"></div><div class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">didReceiveMemoryWarning</span>&#123;</div><div class="line">    <span class="selector-attr">[super didReceiveMemoryWarning]</span>;</div><div class="line">    <span class="comment">//移除缓存中的所有对象</span></div><div class="line">    <span class="selector-attr">[self.imageCacheDict removeAllObjects]</span>;</div><div class="line">    <span class="selector-attr">[self.operationCacheDict removeAllObjects]</span>;</div><div class="line">    <span class="comment">//取消队列中的所有操作</span></div><div class="line">    <span class="selector-attr">[self.downloadQueque cancelAllOperations]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/1gMYl+" alt="测试"></p>
</blockquote>
<h2 id="异步图像-沙盒缓存"><a href="#异步图像-沙盒缓存" class="headerlink" title="异步图像-沙盒缓存"></a>异步图像-沙盒缓存</h2><h3 id="沙盒目录介绍"><a href="#沙盒目录介绍" class="headerlink" title="沙盒目录介绍"></a>沙盒目录介绍</h3><ul>
<li>Documents<ul>
<li>保存由应用程序产生的文件或者数据，例如：涂鸦程序生成的图片，游戏关卡记录</li>
<li>iCloud 会自动备份<code>Document</code>中的所有文件</li>
<li>如果保存了从网络下载的文件，在上架审批的时候，会被拒！</li>
</ul>
</li>
<li>tmp<ul>
<li>临时文件夹，保存临时文件</li>
<li>保存在<code>tmp</code>文件夹中的文件，系统会自动回收，譬如磁盘空间紧张或者重新启动手机</li>
<li>程序员不需要关心<code>tmp</code>文件夹中的释放</li>
</ul>
</li>
<li>Caches<ul>
<li>缓存，保存从网络下载的文件，后续仍然需要继续使用，例如：网络下载的缓存数据，图片</li>
<li><strong>Caches目录下面的文件,当手机存储空间不足的时候,会自动删除</strong></li>
<li><strong>要求程序必需提供一个完善的清除缓存目录的”解决方案”！</strong></li>
</ul>
</li>
<li>preferences<ul>
<li>系统偏好，用户偏好</li>
<li>操作是通过<code>[NSUserDefaults standardDefaults]</code>来直接操作</li>
</ul>
</li>
</ul>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="引入NSString-Path分类"><a href="#引入NSString-Path分类" class="headerlink" title="引入NSString+Path分类"></a>引入<code>NSString+Path</code>分类</h4><ul>
<li>该分类可以简化获取沙盒目录的操作</li>
<li>对url地址使用相关的<code>appending</code>方法, 可以直接生成对应文件名的沙盒地址</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 获取Documents目录</span></div><div class="line">- (<span class="built_in">NSString</span> *)appendDocumentsPath</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取Documents文件目录</span></div><div class="line">    <span class="built_in">NSString</span> *documentsPath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line">    <span class="comment">// 获取图片的名字</span></div><div class="line">    <span class="built_in">NSString</span> *fileName = [<span class="keyword">self</span> lastPathComponent];</div><div class="line">    <span class="comment">// Documents文件目录拼接图片的名字 == 图片保存到沙盒的路径</span></div><div class="line">    <span class="built_in">NSString</span> *filePath = [documentsPath stringByAppendingPathComponent:fileName];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> filePath;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 获取Cache目录</span></div><div class="line">- (<span class="built_in">NSString</span> *)appendCachePath</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取Cache文件目录</span></div><div class="line">    <span class="built_in">NSString</span> *cachePath = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) lastObject];</div><div class="line">    <span class="comment">// 获取图片的名字</span></div><div class="line">    <span class="built_in">NSString</span> *fileName = [<span class="keyword">self</span> lastPathComponent];</div><div class="line">    <span class="comment">// Cache文件目录拼接图片的名字 == 图片保存到沙盒的路径</span></div><div class="line">    <span class="built_in">NSString</span> *filePath = [cachePath stringByAppendingPathComponent:fileName];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> filePath;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 获取Tmp目录</span></div><div class="line">- (<span class="built_in">NSString</span> *)appendTmpPath</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 获取Documents文件目录</span></div><div class="line">    <span class="built_in">NSString</span> *tmpPath = <span class="built_in">NSTemporaryDirectory</span>();</div><div class="line">    <span class="comment">// 获取图片的名字</span></div><div class="line">    <span class="built_in">NSString</span> *fileName = [<span class="keyword">self</span> lastPathComponent];</div><div class="line">    <span class="comment">// Documents文件目录拼接图片的名字 == 图片保存到沙盒的路径</span></div><div class="line">    <span class="built_in">NSString</span> *filePath = [tmpPath stringByAppendingPathComponent:fileName];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> filePath;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="沙盒缓存"><a href="#沙盒缓存" class="headerlink" title="沙盒缓存"></a>沙盒缓存</h4><ul>
<li>导入<code>NSString+Path</code>分类头文件</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#import</span> <span class="string">"NSString+path.h"</span></div></pre></td></tr></table></figure>
<ul>
<li>a. 将图像缓存至沙盒中</li>
<li>b. 判断沙盒中是否有图像的缓存, 如果有, 则将沙盒中的图像直接显示在cell的<code>iconView</code>上, 并<code>return cell</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = <span class="keyword">self</span>.app_infos[indexPath.row];</div><div class="line">    </div><div class="line">    cell.appName.text = info.name;</div><div class="line">    cell.downCount.text = info.download;</div><div class="line">    <span class="comment">//在这里设置占位图像 用来解决图像闪动的问题</span></div><div class="line">    cell.iconView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"user_default"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//判断图像是否已经被缓存</span></div><div class="line">    <span class="comment">//如果缓存 则直接将缓存中的图像显示在iconView上</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.imageCacheDict[info.icon] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ 的图像已经从字典缓存中取出"</span>, info.name);</div><div class="line">        cell.iconView.image = <span class="keyword">self</span>.imageCacheDict[info.icon];</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//获取沙盒路径</span></div><div class="line">    <span class="built_in">NSString</span> *cachePath = [info.icon appendCachePath];</div><div class="line">    </div><div class="line">    <span class="comment">//b. 判断沙盒中是否已经缓存了图片</span></div><div class="line">    <span class="built_in">UIImage</span> *cacheImage = [<span class="built_in">UIImage</span> imageWithContentsOfFile:cachePath];</div><div class="line">    <span class="keyword">if</span> (cacheImage != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ 的图像已经从沙盒中取出"</span>, info.name);</div><div class="line">        <span class="comment">//如果缓存了图片, 则向图像缓存字典中存储一份, 并将图像直接显示到cell的iconView上</span></div><div class="line">        [<span class="keyword">self</span>.imageCacheDict setObject:cacheImage forKey:info.icon];</div><div class="line">        cell.iconView.image = cacheImage;</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">//判断操作是否已经在队列中, 如果操作已经存在, 那么直接返回</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.operationCacheDict[info.icon] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ is downloading"</span>, info.name);</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.app_infos[indexPath.row].icon];</div><div class="line">    </div><div class="line">    <span class="built_in">NSBlockOperation</span> *op = [<span class="built_in">NSBlockOperation</span>  blockOperationWithBlock:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"正在下载 %@ 的图片"</span>, <span class="keyword">self</span>.app_infos[indexPath.row].name);</div><div class="line">        <span class="comment">//在这里加入模拟网络延迟的代码</span></div><div class="line">        <span class="comment">//模拟下载环境有随机延迟 可以看到有操作被重复添加了</span></div><div class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:arc4random_uniform(<span class="number">5</span>)];</div><div class="line">        </div><div class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line">        </div><div class="line">        <span class="comment">//a. 将下载好的图片保存到沙盒中</span></div><div class="line">        [data writeToFile:cachePath atomically:<span class="literal">YES</span>];</div><div class="line">        </div><div class="line">        <span class="comment">//在主线程中更新UI</span></div><div class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">            <span class="comment">//查看已经存在的操作数量</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"操作的数量: %ld"</span>, <span class="keyword">self</span>.downloadQueque.operationCount);</div><div class="line">            </div><div class="line">            <span class="comment">//添加到图像字典缓存中</span></div><div class="line">            <span class="comment">//注意!! 字典value不能为nil</span></div><div class="line">            <span class="keyword">if</span> (image != <span class="literal">nil</span>) &#123;</div><div class="line">                [<span class="keyword">self</span>.imageCacheDict setValue:image forKey:info.icon];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="comment">//下载完成, 应将当前下载操作从缓存中移除</span></div><div class="line">            [<span class="keyword">self</span>.operationCacheDict removeObjectForKey:info.icon];</div><div class="line">            </div><div class="line">            cell.iconView.image = image;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">//将操作加入下载队列</span></div><div class="line">    [<span class="keyword">self</span>.downloadQueque addOperation:op];</div><div class="line">    <span class="comment">//将操作加入操作的字典缓存</span></div><div class="line">    [<span class="keyword">self</span>.operationCacheDict setObject:op forKey:info.icon];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br>可以看到, 程序刚开始运行的时候, 当沙盒中缓存了图片时, 将直接从沙盒中加载图片, 而第二次加载图片时, 则会直接从缓存字典中取出了<br><img src="http://d.pr/i/Lg8E+" alt="测试"><br><img src="http://d.pr/i/1aDEG+" alt="沙盒缓存"></p>
</blockquote>
<p><strong>至此, 模拟SDWebImage就完成了, 下一步, 我将继续尝试简单模仿一下SDWebImage的内部实现</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模拟SDWebImage异步下载图片操作(二)]]></title>
      <url>http://yoursite.com/2016/08/01/%E6%A8%A1%E6%8B%9FSDWebImage%E5%BC%82%E6%AD%A5%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h2 id="异步图像-自行加载"><a href="#异步图像-自行加载" class="headerlink" title="异步图像-自行加载"></a>异步图像-自行加载</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>自行加载异步图像</li>
<li>设置</li>
</ul>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="异步下载的简单实现"><a href="#异步下载的简单实现" class="headerlink" title="异步下载的简单实现"></a>异步下载的简单实现</h4><ul>
<li>定义操作队列</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSOperationQueue</span> *queque;</div></pre></td></tr></table></figure>
<ul>
<li>懒加载操作队列</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSOperationQueue</span> *)queque&#123;</div><div class="line">    <span class="keyword">if</span> (_queque == <span class="literal">nil</span>) &#123;</div><div class="line">        _queque = [[<span class="built_in">NSOperationQueue</span> alloc] init];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> _queque;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改数据源方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = <span class="keyword">self</span>.app_infos[indexPath.row];</div><div class="line">    </div><div class="line">    cell.appName.text = info.name;</div><div class="line">    cell.downCount.text = info.download;</div><div class="line">    </div><div class="line">    <span class="comment">//将使用SDWebImage加载图片的代码注释掉</span></div><div class="line"><span class="comment">//    [cell.iconView sd_setImageWithURL:[NSURL URLWithString:info.icon]];</span></div><div class="line">    </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.app_infos[indexPath.row].icon];</div><div class="line">    </div><div class="line">    <span class="built_in">NSBlockOperation</span> *op = [<span class="built_in">NSBlockOperation</span>  blockOperationWithBlock:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"正在下载 %@ 的图片"</span>, <span class="keyword">self</span>.app_infos[indexPath.row].name);</div><div class="line">        </div><div class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line">        </div><div class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">            cell.iconView.image = image;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span>.downloadQueque addOperation:op];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/lh1F+" alt="测试"></p>
</blockquote>
<h4 id="模拟延时"><a href="#模拟延时" class="headerlink" title="模拟延时"></a>模拟延时</h4><ul>
<li>模拟网络延时</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"正在下载 %@ 的图片"</span>, <span class="keyword">self</span>.app_infos[indexPath.row].name);</div><div class="line"><span class="comment">//在这里加入模拟网络延迟的代码</span></div><div class="line">[<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.5</span>];</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试, 快速滚动表格</p>
<ul>
<li>会发现表格行的cell因为复用, 出现图片闪动的问题<br><img src="http://d.pr/i/13Kmz+" alt="图片闪动"></li>
<li>表格的复用问题：没有在数据源方法中更新显示</li>
<li>解决办法：使用占位图像</li>
</ul>
</blockquote>
<ul>
<li>在数据源方法中设置占位图像</li>
</ul>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cell.appName.<span class="built_in">text</span> = info.<span class="built_in">name</span>;</div><div class="line">cell.downCount.<span class="built_in">text</span> = info.download;</div><div class="line"><span class="comment">//在这里设置占位图像(图像素材请自行寻找) 用来解决图像闪动的问题</span></div><div class="line">cell.iconView.<span class="built_in">image</span> = [UIImage imageNamed:@<span class="string">"user_default"</span>];</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/hNrP+" alt="设置占位图像"></p>
<ul>
<li>每次图像都从网络下载，浪费流量</li>
<li>每次都显示占位图像，造成不好的用户体验</li>
<li>合理的解决方案：图像没有下载显示占位图像，如果下载完成，直接显示图像</li>
<li>解决办法一：在模型中缓存图像<ul>
<li>优点：简单</li>
<li>缺点：内存不足时不好释放资源</li>
</ul>
</li>
<li>解决办法二：新建图像缓存字典<ul>
<li>优点：能够单独管理图像的内存缓存</li>
<li>缺点：代码要稍微繁琐一些</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="异步图像-使用模型缓存"><a href="#异步图像-使用模型缓存" class="headerlink" title="异步图像-使用模型缓存"></a>异步图像-使用模型缓存</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul>
<li>使用模型缓存网络图像</li>
</ul>
<h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>在模型中添加图像缓存属性</li>
</ul>
<blockquote>
<p>注意需要导入<uikit uikit.h="">头文件</uikit></p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;UIKit/UIKit.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HMAppInfo</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *download;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *icon;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UIImage</span> *imageCache;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>修改数据源方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = <span class="keyword">self</span>.app_infos[indexPath.row];</div><div class="line">    </div><div class="line">    cell.appName.text = info.name;</div><div class="line">    cell.downCount.text = info.download;</div><div class="line">    <span class="comment">//在这里设置占位图像 用来解决图像闪动的问题</span></div><div class="line">    cell.iconView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"user_default"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//判断是否在模型中已经有缓存 如果有 将图片设置好后直接return cell;</span></div><div class="line">    <span class="keyword">if</span> (info.imageCache != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"从模型缓存中取图片"</span>);</div><div class="line">        cell.iconView.image = info.imageCache;</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.app_infos[indexPath.row].icon];</div><div class="line">    </div><div class="line">    <span class="built_in">NSBlockOperation</span> *op = [<span class="built_in">NSBlockOperation</span>  blockOperationWithBlock:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"正在下载 %@ 的图片"</span>, <span class="keyword">self</span>.app_infos[indexPath.row].name);</div><div class="line">        <span class="comment">//在这里加入模拟网络延迟的代码</span></div><div class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:<span class="number">0.5</span>];</div><div class="line">        </div><div class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line">        </div><div class="line">        <span class="comment">//在这里将图像存入模型缓存</span></div><div class="line">        info.imageCache = image;</div><div class="line">        </div><div class="line">        <span class="comment">//在主线程中更新UI</span></div><div class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">            cell.iconView.image = image;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">//将操作加入下载队列</span></div><div class="line">    [<span class="keyword">self</span>.downloadQueque addOperation:op];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>存在问题</p>
<ul>
<li>如果出现内存警告, 内存清理工作将变得繁琐且不符合逻辑</li>
<li>一旦cell复用, 仍然会重新下载<br><img src="http://d.pr/i/MBha+" alt="重新下载的复现"></li>
<li>解决办法: 单独管理图像缓存</li>
</ul>
</blockquote>
<h2 id="异步图像-使用字典进行缓存"><a href="#异步图像-使用字典进行缓存" class="headerlink" title="异步图像-使用字典进行缓存"></a>异步图像-使用字典进行缓存</h2><h3 id="目标-2"><a href="#目标-2" class="headerlink" title="目标"></a>目标</h3><ul>
<li>使用字典缓存已经下载好的图像</li>
</ul>
<h3 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h3><ul>
<li>恢复模型 将之前设置的缓存图像属性删除</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HMAppInfo</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *download;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *icon;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>在<code>viewController</code>中定义字典缓存属性</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *imageCacheDict;</div></pre></td></tr></table></figure>
<ul>
<li>懒加载字典缓存</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSMutableDictionary</span> *)imageCacheDict&#123;</div><div class="line">    <span class="keyword">if</span> (_imageCacheDict == <span class="literal">nil</span>) &#123;</div><div class="line">        _imageCacheDict = [<span class="built_in">NSMutableDictionary</span> dictionary];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> _imageCacheDict;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改数据源方法, 判断缓存图像是否已经存在</li>
<li>如果缓存不存在, 则下载图像, 并添加到字典缓存中</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = <span class="keyword">self</span>.app_infos[indexPath.row];</div><div class="line">    </div><div class="line">    cell.appName.text = info.name;</div><div class="line">    cell.downCount.text = info.download;</div><div class="line">    <span class="comment">//在这里设置占位图像 用来解决图像闪动的问题</span></div><div class="line">    cell.iconView.image = [<span class="built_in">UIImage</span> imageNamed:<span class="string">@"user_default"</span>];</div><div class="line">    </div><div class="line">    <span class="comment">//判断图像是否已经被缓存</span></div><div class="line">    <span class="comment">//如果缓存 则直接将缓存中的图像显示在iconView上</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.imageCacheDict[info.icon] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ 的图像已经从字典缓存中取出"</span>, info.name);</div><div class="line">        cell.iconView.image = <span class="keyword">self</span>.imageCacheDict[info.icon];</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.operationCacheDict[info.icon] != <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@ is downloading"</span>, info.name);</div><div class="line">        <span class="keyword">return</span> cell;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="keyword">self</span>.app_infos[indexPath.row].icon];</div><div class="line">    </div><div class="line">    <span class="built_in">NSBlockOperation</span> *op = [<span class="built_in">NSBlockOperation</span>  blockOperationWithBlock:^&#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"正在下载 %@ 的图片"</span>, <span class="keyword">self</span>.app_infos[indexPath.row].name);</div><div class="line">        <span class="comment">//在这里加入模拟网络延迟的代码</span></div><div class="line">        <span class="comment">//模拟下载环境有随机延迟 可以看到有操作被重复添加了</span></div><div class="line">        [<span class="built_in">NSThread</span> sleepForTimeInterval:arc4random_uniform(<span class="number">10</span>)];</div><div class="line">        </div><div class="line">        <span class="built_in">NSData</span> *data = [<span class="built_in">NSData</span> dataWithContentsOfURL:url];</div><div class="line">        <span class="built_in">UIImage</span> *image = [<span class="built_in">UIImage</span> imageWithData:data];</div><div class="line">        </div><div class="line">        <span class="comment">//在主线程中更新UI</span></div><div class="line">        [[<span class="built_in">NSOperationQueue</span> mainQueue] addOperationWithBlock:^&#123;</div><div class="line">            <span class="comment">//查看已经存在的操作数量</span></div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"操作的数量: %ld"</span>, <span class="keyword">self</span>.downloadQueque.operationCount);</div><div class="line">            </div><div class="line">            <span class="comment">//添加到图像字典缓存中</span></div><div class="line">            <span class="comment">//注意!! 字典value不能为nil</span></div><div class="line">            <span class="keyword">if</span> (image != <span class="literal">nil</span>) &#123;</div><div class="line">                [<span class="keyword">self</span>.imageCacheDict setValue:image forKey:info.icon];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            cell.iconView.image = image;</div><div class="line">        &#125;];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">//将操作加入下载队列</span></div><div class="line">    [<span class="keyword">self</span>.downloadQueque addOperation:op];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意: 使用模型的icon属性, 可以避免缓存图像重名的问题</p>
</blockquote>
<h3 id="实现内存警告方法"><a href="#实现内存警告方法" class="headerlink" title="实现内存警告方法"></a>实现内存警告方法</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#pragma</span> <span class="selector-tag">mark</span> <span class="selector-tag">-</span> <span class="selector-tag">memory</span> <span class="selector-tag">Warning</span></div><div class="line"></div><div class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">didReceiveMemoryWarning</span>&#123;</div><div class="line">    <span class="selector-attr">[super didReceiveMemoryWarning]</span>;</div><div class="line">    <span class="selector-attr">[self.imageCacheDict removeAllObjects]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/wyGJ+" alt="测试"><br>如果某一个下载操作耗时较长, 当用户快速拖拽表单时, 下载操作会被重复创建!</p>
</blockquote>
<h3 id="测试重复创建操作的现象"><a href="#测试重复创建操作的现象" class="headerlink" title="测试重复创建操作的现象"></a>测试重复创建操作的现象</h3><ul>
<li>设置下载的模拟延迟略长一些, 并快速拖动表单<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"正在下载 %@ 的图片"</span>, <span class="keyword">self</span>.app_infos[indexPath.row].name);</div><div class="line"><span class="comment">//在这里加入模拟网络延迟的代码</span></div><div class="line"><span class="comment">//模拟下载环境有随机延迟 可以看到有操作被重复添加了</span></div><div class="line">[<span class="built_in">NSThread</span> sleepForTimeInterval:arc4random_uniform(<span class="number">10</span>)];</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>如下图, 总共只有16张图片, 却添加了21个下载操作!<br><img src="http://d.pr/i/7p3P+" alt="测试"></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[模拟SDWebImage异步下载图片操作(一)]]></title>
      <url>http://yoursite.com/2016/07/30/%E6%A8%A1%E6%8B%9FSDWebImage%E5%BC%82%E6%AD%A5%E4%B8%8B%E8%BD%BD%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<p><img src="http://ww4.sinaimg.cn/large/6b1763dbjw1f6c5lbhtm5j21kw2aytxa.jpg" alt="思维导图"></p>
<h2 id="异步下载图片操作-搭建界面"><a href="#异步下载图片操作-搭建界面" class="headerlink" title="异步下载图片操作-搭建界面"></a>异步下载图片操作-搭建界面</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul>
<li>搭建界面</li>
<li>体会<code>AFNetWoring</code>的使用</li>
<li>复习<code>tableView</code>的简单实用</li>
</ul>
<h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul>
<li>新建项目</li>
<li>将<code>Main.storyboard</code>中初始的<code>ViewController</code>删除, 并在其中拖入一个包装着<code>NavigationController</code>的<code>TableviewController</code></li>
<li>将<code>storyboard</code>中的<code>TableView</code> 绑定为系统的<code>viewController</code>类 并将系统自带的<code>viewController</code>继承自<code>UITableViewController</code>类<blockquote>
<p>运行测试<br><img src="http://d.pr/i/1dUJF+" alt="Cell界面搭建"></p>
</blockquote>
</li>
</ul>
<h4 id="加载网络数据"><a href="#加载网络数据" class="headerlink" title="加载网络数据"></a>加载网络数据</h4><ul>
<li>添加<code>AFNetWorking</code>网络框架</li>
<li>导入头文件</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#import</span> <span class="string">"AFNetworking.h"</span></div></pre></td></tr></table></figure>
<ul>
<li>实现loadData方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)loadData &#123;</div><div class="line">    <span class="built_in">NSString</span> *urlString = <span class="string">@"https://raw.githubusercontent.com/massacreformash/DemoRepository/master/apps.json"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//初始化一个网络请求的管理器</span></div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    </div><div class="line">    [manager GET:urlString parameters:<span class="literal">nil</span> progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"success: %@"</span>, responseObject);</div><div class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">        <span class="comment">//在公司开发的话 错误请求一定要处理</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"fail: %@"</span>, error);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试 此时在控制台应该能够看到类似于这样的输出:<br><img src="http://d.pr/i/1e5R7+" alt="输出"></p>
</blockquote>
<h4 id="绑定表格数据"><a href="#绑定表格数据" class="headerlink" title="绑定表格数据"></a>绑定表格数据</h4><ul>
<li>定义tableView可重用标识符</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *cellId = <span class="string">@"cellid"</span>;</div></pre></td></tr></table></figure>
<ul>
<li>设置数据源并注册原型cell</li>
<li>遵守协议</li>
</ul>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@interface</span> ViewController () <span class="variable">&lt;UITableViewDataSource&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>实现协议方法</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 数据源方法</span></div><div class="line"></div><div class="line">-(<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section&#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:cellId forIndexPath:indexPath];</div><div class="line">    cell.textLabel.text = @(indexPath.row).description;</div><div class="line">    <span class="keyword">return</span> cell;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><img src="http://d.pr/i/D2IP+" alt="测试"></p>
</blockquote>
<h4 id="定义模型"><a href="#定义模型" class="headerlink" title="定义模型"></a>定义模型</h4><ul>
<li>新建<code>HMAppInfo</code>模型 继承自<code>NSObject</code> 并声明好相关属性</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> <span class="attribute">HMAppInfo </span>: NSObject</div><div class="line"></div><div class="line"><span class="variable">@property</span> (nonatomic, copy) NSString *name;</div><div class="line"><span class="variable">@property</span> (nonatomic, copy) NSString *download;</div><div class="line"><span class="variable">@property</span> (nonatomic, copy) NSString *icon;</div><div class="line"></div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>在viewController中导入模型 并设置模型数组</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"HMAppInfo.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> &lt;HMAppInfo *&gt; *app_infos;</div></pre></td></tr></table></figure>
<ul>
<li>懒加载<code>app_infos</code></li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSMutableArray</span> *)app_infos&#123;</div><div class="line">    <span class="keyword">if</span> (_app_infos == <span class="literal">nil</span>) &#123;</div><div class="line">        _app_infos = [<span class="built_in">NSMutableArray</span> array];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _app_infos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>修改<code>loadData</code>方法 在其中将下载好的字典转为模型</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)loadData &#123;</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *urlString = <span class="string">@"https://raw.githubusercontent.com/massacreformash/DemoRepository/master/apps.json"</span>;</div><div class="line">    </div><div class="line">    <span class="comment">//初始化一个网络请求的管理器</span></div><div class="line">    AFHTTPSessionManager *manager = [AFHTTPSessionManager manager];</div><div class="line">    </div><div class="line">    [manager GET:urlString parameters:<span class="literal">nil</span> progress:<span class="literal">nil</span> success:^(<span class="built_in">NSURLSessionDataTask</span> * _Nonnull task, <span class="keyword">id</span>  _Nullable responseObject) &#123;</div><div class="line">        <span class="comment">//字典转模型</span></div><div class="line">        <span class="built_in">NSArray</span> *array = responseObject;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSDictionary</span> *dict <span class="keyword">in</span> array) &#123;</div><div class="line">            HMAppInfo *info = [[HMAppInfo alloc] init];</div><div class="line">            [info setValuesForKeysWithDictionary:dict];</div><div class="line">            [<span class="keyword">self</span>.app_infos addObject:info];</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//刷新tableView</span></div><div class="line">        [<span class="keyword">self</span>.tableView reloadData];</div><div class="line">    &#125; failure:^(<span class="built_in">NSURLSessionDataTask</span> * _Nullable task, <span class="built_in">NSError</span> * _Nonnull error) &#123;</div><div class="line">        <span class="comment">//在公司开发的话 错误请求一定要处理</span></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"fail: %@"</span>, error);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="built_in">NSThread</span> currentThread]);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>得到类似如下数据:<br><img src="http://d.pr/i/1kt4z+" alt="测试"></p>
</blockquote>
<ul>
<li>修改数据源方法, 绑定cell数据</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#pragma mark - 数据源方法</span></div><div class="line"></div><div class="line">-(<span class="built_in">NSInteger</span>)tableView:(<span class="built_in">UITableView</span> *)tableView numberOfRowsInSection:(<span class="built_in">NSInteger</span>)section&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.app_infos.count;</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="built_in">UITableViewCell</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView cellForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="built_in">UITableViewCell</span> *cell = [tableView dequeueReusableCellWithIdentifier:<span class="string">@"cell"</span> forIndexPath:indexPath];</div><div class="line">    </div><div class="line">    HMAppInfo *info = <span class="keyword">self</span>.app_infos[indexPath.row];</div><div class="line">    cell.textLabel.text = info.name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>进行测试<br><img src="http://d.pr/i/27pF+" alt="测试"></p>
</blockquote>
<h2 id="异步下载图片操作-设置图像"><a href="#异步下载图片操作-设置图像" class="headerlink" title="异步下载图片操作-设置图像"></a>异步下载图片操作-设置图像</h2><h3 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h3><ul>
<li>使用<code>SDWebImage</code>异步加载网络图像</li>
<li>在storyboard中自定义Cell</li>
</ul>
<h3 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h3><h4 id="使用SDWebImage加载图像"><a href="#使用SDWebImage加载图像" class="headerlink" title="使用SDWebImage加载图像"></a>使用<code>SDWebImage</code>加载图像</h4><ul>
<li>导入<code>SDWebImage</code>框架</li>
<li>导入头文件</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#import</span> <span class="string">"UIImageView+WebCache.h"</span></div></pre></td></tr></table></figure>
<ul>
<li>修改数据源方法</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (UITableViewCell *)<span class="string">tableView:</span>(UITableView *)tableView <span class="string">cellForRowAtIndexPath:</span>(NSIndexPath *)indexPath &#123;</div><div class="line"></div><div class="line">    UITableViewCell *cell = [tableView <span class="string">dequeueReusableCellWithIdentifier:</span>cellId <span class="string">forIndexPath:</span>indexPath];</div><div class="line"></div><div class="line">    HMAppInfo *info = self.app_infos[indexPath.row];</div><div class="line">    cell.textLabel.text = info.name;</div><div class="line"></div><div class="line">    <span class="comment">//SDWebImage</span></div><div class="line">    [cell.imageView <span class="string">sd_setImageWithURL:</span>[NSURL <span class="string">URLWithString:</span>info.icon]];</div><div class="line"></div><div class="line">    <span class="keyword">return</span> cell;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>在info.plist增加ATS设置<br><img src="http://d.pr/i/15K3N+" alt="设置ATS"><br>运行测试</p>
<ul>
<li>图像需要点击之后才能显示<br><img src="http://d.pr/i/XTsf+" alt="测试"></li>
<li>因为图像加载是异步的, 第一次设置数据源方法时, 图像还没有下载完成, 那么系统默认的<code>tableViewCell</code>也不会创建图像视图<br>解决办法: 用自定义的Cell</li>
</ul>
</blockquote>
<h4 id="自定义Cell"><a href="#自定义Cell" class="headerlink" title="自定义Cell"></a>自定义Cell</h4><ul>
<li>新建自定义的<code>HMAppCell</code>继承自<code>UITableviewCell</code>, 同时将Tableview的Cell绑定到<code>HMAppCell</code>类</li>
<li>设置自动布局</li>
</ul>
<p><img src="http://d.pr/i/18u4U+" alt="Cell界面搭建"></p>
<ul>
<li>代码连线到头文件中</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@interface</span> <span class="attribute">HMAppCell </span>: UITableViewCell</div><div class="line"></div><div class="line"><span class="variable">@property</span> (weak, nonatomic) IBOutlet UIImageView *iconView;</div><div class="line"><span class="variable">@property</span> (weak, nonatomic) IBOutlet UILabel *appName;</div><div class="line"><span class="variable">@property</span> (weak, nonatomic) IBOutlet UILabel *downCount;</div><div class="line"></div><div class="line"><span class="variable">@end</span></div></pre></td></tr></table></figure>
<h4 id="修改控制器的代码"><a href="#修改控制器的代码" class="headerlink" title="修改控制器的代码"></a>修改控制器的代码</h4><ul>
<li>导入头文件</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#import</span> <span class="string">"HMAppCell.h"</span></div></pre></td></tr></table></figure>
<ul>
<li>修改可重用cell为自定义cell</li>
</ul>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">HMAppCell *cell = [tableView <span class="string">dequeueReusableCellWithIdentifier:</span>cellID <span class="string">forIndexPath:</span>indexPath];</div></pre></td></tr></table></figure>
<ul>
<li>修改数据源方法</li>
</ul>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-(UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath&#123;</div><div class="line">    </div><div class="line">    HMAppCell *cell = [tableView dequeueReusableCellWithIdentifier:cellID forIndexPath:indexPath]<span class="comment">;</span></div><div class="line">    </div><div class="line">    HMAppInfo *info = self.app_infos[indexPath.row]<span class="comment">;</span></div><div class="line">    </div><div class="line">    cell.appName<span class="meta">.text</span> = info.name<span class="comment">;</span></div><div class="line">    cell.downCount<span class="meta">.text</span> = info.download<span class="comment">;</span></div><div class="line">    [cell.iconView sd_setImageWithURL:[NSURL URLWithString:info.icon]]<span class="comment">;</span></div><div class="line">    </div><div class="line">    return cell<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>运行测试<br><img src="http://d.pr/i/1hGr7+" alt="测试"></p>
</blockquote>
]]></content>
    </entry>
    
  
  
</search>
